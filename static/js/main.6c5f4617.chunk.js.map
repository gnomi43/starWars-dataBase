{"version":3,"sources":["components/header/index.js","components/header/header.js","components/spinner/index.js","components/spinner/spinner.js","services/swapi-service.js","components/error-indicator/error-indicator.js","components/random-planet/random-planet.js","components/random-planet/index.js","components/error-boundry/index.js","components/error-boundry/error-boundry.js","components/swapi-service-context/swapi-service-context.js","components/item-details/item-details.js","components/item-details/index.js","components/hoc-helper/with-data.js","components/hoc-helper/with-swapi-service.js","components/sw-component/person-details.js","components/sw-component/planet-details.js","components/sw-component/starship-details.js","components/item-list/item-list.js","components/item-list/index.js","components/sw-component/item-lists.js","components/row/index.js","components/row/row.js","components/pages/people-page.js","components/pages/planet-page.js","components/pages/starship-page.js","components/app/index.js","components/app/app.js","index.js"],"names":["Header","className","to","Spinner","SwapiService","_apiBase","_imageBase","getAllPeople","a","getResource","res","results","map","_transformPerson","getPerson","id","person","getAllPlanets","_transformPlanet","getPlanet","planet","getAllStarships","_transformStarship","getStarship","starship","getPersonImage","getStarshipImage","getPlanetImage","_extractId","name","population","rotationPeriod","rotation_period","diameter","model","manufacturer","costInCredits","cost_in_credits","length","crew","passengers","cargoCapacity","cargo_capacity","gender","birthYear","birth_year","eyeColor","eye_color","url","fetch","this","ok","Error","status","json","item","match","ErrorIndicator","RandomPlanet","swapiService","state","loading","error","onPlanetLoaded","setState","onError","err","updatePlanet","Math","floor","random","then","catch","updateInterval","props","interval","setInterval","clearInterval","spinner","content","errorMessege","Component","defaultProps","PlanetView","Fragment","src","alt","ErrorBoundry","hasError","errorInfo","console","log","children","React","createContext","SwapiServiceProvider","Provider","SwapiServiceConsumer","Consumer","Record","field","label","ItemDetails","image","updateItem","itemId","getData","getImageUrl","prevProps","Children","child","cloneElement","withData","View","data","update","withSwapiService","Wrapped","mapMethodsToProps","serviceProps","ItemList","onItemSelected","renderLabe","items","key","onClick","withChildFunction","fn","renderName","PersonList","PlanetList","StarshipList","Row","left","right","withRouter","history","params","push","PlanetPage","selectedItem","App","value","basename","path","render","exact","component","PeoplePage","StarshipPage","ReactDOM","document","getElementById"],"mappings":"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","file":"static/js/main.6c5f4617.chunk.js","sourcesContent":["import Header from './header';\r\n\r\nexport default Header;","import React from 'react';\r\n\r\nimport './header.css';\r\n\r\nimport { Link }  from 'react-router-dom';\r\n\r\nconst Header = () => {\r\n  return (\r\n    <div className=\"header d-flex\">\r\n      <h3>\r\n          <Link to=\"/\">StarDB</Link>\r\n      </h3>\r\n      <ul className=\"d-flex\">\r\n        <li>\r\n            <Link to=\"/peoples/\">People</Link>\r\n        </li>\r\n        <li>\r\n            <Link to=\"/planets/\">Planets</Link>\r\n        </li>\r\n        <li>\r\n            <Link to=\"/starships/\">Starships</Link>\r\n        </li>\r\n      </ul>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default Header;","import Spinner from './spinner';\r\n\r\nexport default Spinner;\r\n","import React from 'react';\r\n\r\nimport './spinner.css';\r\n\r\nconst Spinner = () => {\r\n  return (\r\n    <div className=\"lds-css\">\r\n      <div className=\"lds-double-ring\">\r\n        <div></div>\r\n        <div></div>\r\n      </div>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default Spinner;\r\n","export default class SwapiService {\r\n\r\n  _apiBase = 'https://swapi.dev/api';\r\n  _imageBase = 'https://starwars-visualguide.com/assets/img';\r\n\r\n  async getResource(url) {\r\n    const res = await fetch(`${this._apiBase}${url}`);\r\n\r\n    if (!res.ok) {\r\n      throw new Error(`Could not fetch ${url}` +\r\n        `, received ${res.status}`)\r\n    }\r\n    return await res.json();\r\n  }\r\n\r\n  getAllPeople = async () => {\r\n    const res = await this.getResource(`/people/`);\r\n    return res.results.map(this._transformPerson);\r\n  }\r\n\r\n  getPerson = async (id) => {\r\n    const person = await this.getResource(`/people/${id}/`);\r\n    return this._transformPerson(person);\r\n  }\r\n\r\n  getAllPlanets = async () => {\r\n    const res = await this.getResource(`/planets/`);\r\n    return res.results.map(this._transformPlanet);\r\n  }\r\n\r\n  getPlanet = async (id) => {\r\n    const planet = await this.getResource(`/planets/${id}/`);\r\n    return this._transformPlanet(planet);\r\n  }\r\n\r\n  getAllStarships = async () => {\r\n    const res = await this.getResource(`/starships/`);\r\n    return res.results.map(this._transformStarship);\r\n  }\r\n\r\n  getStarship = async (id) => {\r\n    const starship = await this.getResource(`/starships/${id}/`);\r\n    return this._transformStarship(starship);\r\n  }\r\n\r\n  getPersonImage = ({id}) =>{\r\n    return `${this._imageBase}/characters/${id}.jpg`\r\n  }\r\n\r\n  getStarshipImage = ({id}) =>{\r\n    return `${this._imageBase}/starships/${id}.jpg`\r\n  }\r\n\r\n  getPlanetImage = ({id}) =>{\r\n    return `${this._imageBase}/planets/${id}.jpg`\r\n  }\r\n\r\n  _extractId(item) {\r\n    const idRegExp = /\\d+/;\r\n    return item.url.match(idRegExp);\r\n  }\r\n\r\n  _transformPlanet = (planet) => {\r\n    return {\r\n      id: this._extractId(planet),\r\n      name: planet.name,\r\n      population: planet.population,\r\n      rotationPeriod: planet.rotation_period,\r\n      diameter: planet.diameter\r\n    };\r\n  }\r\n\r\n  _transformStarship = (starship) => {\r\n    return {\r\n      id: this._extractId(starship),\r\n      name: starship.name,\r\n      model: starship.model,\r\n      manufacturer: starship.manufacturer,\r\n      costInCredits: starship.cost_in_credits,\r\n      length: starship.length,\r\n      crew: starship.crew,\r\n      passengers: starship.passengers,\r\n      cargoCapacity: starship.cargo_capacity\r\n    }\r\n  }\r\n\r\n  _transformPerson = (person) => {\r\n    return {\r\n      id: this._extractId(person),\r\n      name: person.name,\r\n      gender: person.gender,\r\n      birthYear: person.birth_year,\r\n      eyeColor: person.eye_color\r\n    }\r\n  }\r\n}\r\n","import React from 'react';\r\n\r\nconst ErrorIndicator = () => {\r\n    return (\r\n        <div className=\"error-indicator\">\r\n            <span className=\"boom\">BOOM!</span>\r\n            <span>\r\n                something has gone terribly wrong\r\n            </span>\r\n            <span>\r\n                (but we already sent droids to fix it)\r\n            </span>\r\n        </div>\r\n    );\r\n};\r\n\r\nexport default ErrorIndicator;","import React, { Component } from 'react';\r\nimport PropTypes from \"prop-types\";\r\n\r\nimport Spinner from '../spinner';\r\nimport SwapiService from '../../services/swapi-service';\r\nimport ErrorIndicator from '../error-indicator/error-indicator'\r\n\r\nimport './random-planet.css';\r\n\r\nexport default class RandomPlanet extends Component {\r\n\r\n   static defaultProps = {\r\n    updateInterval: 10000\r\n  }\r\n  \r\n  static propTypes = {\r\n    updateInterval: PropTypes.number,\r\n  }\r\n\r\n  swapiService = new SwapiService();\r\n\r\n  state = {\r\n    planet: {},\r\n    loading: true,\r\n    error: false\r\n  };\r\n\r\n  componentDidMount() {\r\n    const { updateInterval } = this.props;\r\n    this.updatePlanet();\r\n    this.interval = setInterval(this.updatePlanet, updateInterval);\r\n  }\r\n\r\n  UNSAFE_componentWillMount() {\r\n    clearInterval(this.interval);\r\n  }\r\n\r\n  onPlanetLoaded = (planet) => {\r\n    this.setState({\r\n      planet,\r\n      loading: false\r\n    });\r\n  }; \r\n\r\n  onError = (err) => {\r\n    this.setState({\r\n      error: true,\r\n      loading: false\r\n    });\r\n  };\r\n\r\n  updatePlanet = () => {\r\n    const id = Math.floor(Math.random()*20+2);\r\n    this.swapiService\r\n      .getPlanet(id)\r\n      .then(this.onPlanetLoaded)\r\n      .catch(this.onError);\r\n  }\r\n\r\n  render() {\r\n    const { planet, loading, error } = this.state;\r\n\r\n\r\n    const spinner = loading ? <Spinner /> : null;\r\n    const content = !loading && !error ? <PlanetView planet={planet}/> : null;\r\n    const errorMessege = error ? <ErrorIndicator /> : null;\r\n\r\n    return (\r\n      <div className=\"random-planet jumbotron rounded\">\r\n        {errorMessege}\r\n        {spinner}\r\n        {content}\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\nconst PlanetView = ({ planet }) => {\r\n\r\n  const { id, name, population,\r\n    rotationPeriod, diameter } = planet;\r\n\r\n  return (\r\n    <React.Fragment>\r\n      <img className=\"planet-image\"\r\n           src={`https://starwars-visualguide.com/assets/img/planets/${id}.jpg`} \r\n           alt={name}/>\r\n      <div>\r\n        <h4>{name}</h4>\r\n        <ul className=\"list-group list-group-flush\">\r\n          <li className=\"list-group-item\">\r\n            <span className=\"term\">Population</span>\r\n            <span>{population}</span>\r\n          </li>\r\n          <li className=\"list-group-item\">\r\n            <span className=\"term\">Rotation Period</span>\r\n            <span>{rotationPeriod}</span>\r\n          </li>\r\n          <li className=\"list-group-item\">\r\n            <span className=\"term\">Diameter</span>\r\n            <span>{diameter}</span>\r\n          </li>\r\n        </ul>\r\n      </div>\r\n    </React.Fragment>\r\n  );\r\n};\r\n\r\n\r\n\r\n","import RandomPlanet from './random-planet';\r\n\r\nexport default RandomPlanet;\r\n","import ErrorBoundry from './error-boundry';\n\nexport default ErrorBoundry;\n","import React, { Component } from 'react';\n\nimport ErrorIndicator from '../error-indicator/error-indicator';\n\nexport default class ErrorBoundry extends Component {\n\n  state = {\n    hasError: false\n  };\n\n  componentDidCatch(error, errorInfo) {\n    console.log(error);\n    console.log(errorInfo);\n    this.setState({\n      hasError: true\n    });\n  }\n\n  render() {\n\n    if (this.state.hasError) {\n      return <ErrorIndicator />\n    }\n\n    return this.props.children;\n  }\n}\n","import React from \"react\";\r\nconst { \r\n    Provider: SwapiServiceProvider,\r\n    Consumer: SwapiServiceConsumer  \r\n}  = React.createContext();\r\n\r\nexport {\r\n    SwapiServiceProvider,\r\n    SwapiServiceConsumer\r\n};","import React, { Component } from 'react';\r\nimport SwapiService from '../../services/swapi-service'\r\n\r\nimport './item-details.css';\r\n\r\nconst Record = ({ item, field, label }) =>{\r\n  return(\r\n    <li className=\"list-group-item\">\r\n    <span className=\"term\">{label}</span>\r\n    <span>{ item[field] }</span>\r\n  </li>\r\n  );\r\n};\r\n\r\nexport {\r\n  Record\r\n};\r\n\r\nexport default class ItemDetails extends Component {\r\n\r\n  swapiService = new SwapiService();\r\n\r\n  state = {\r\n    item: null,\r\n    image: null\r\n  }\r\n\r\n  componentDidMount() {\r\n    this.updateItem();\r\n  };\r\n\r\n  componentDidUpdate(prevProps) {\r\n    if(this.props.itemId !== prevProps.itemId){\r\n      this.updateItem();\r\n    }\r\n  }\r\n\r\n  updateItem = () => {\r\n    const { itemId, getData, getImageUrl } = this.props;\r\n\r\n    if( !itemId ){\r\n      return;\r\n    }\r\n\r\n    getData(itemId)\r\n    .then((item) => {\r\n      this.setState({\r\n        item,\r\n        image: getImageUrl(item)\r\n      });\r\n    });\r\n\r\n  }\r\n\r\n\r\n  render() {\r\n    if(!this.state.item){\r\n      return <span>Select a item from a list</span>\r\n    }\r\n\r\n    const { item, image } = this.state;\r\n    const { name } = item;\r\n\r\n    return (\r\n      <div className=\"item-details card\">\r\n        <img className=\"item-image\"\r\n          src={image}\r\n          alt={name}/>\r\n\r\n        <div className=\"card-body\">\r\n          <h4>{name}</h4>\r\n          <ul className=\"list-group list-group-flush\">\r\n            { \r\n              React.Children.map(this.props.children, (child) => {\r\n\r\n              return React.cloneElement(child, { item });\r\n              })\r\n            }\r\n          </ul>\r\n        </div>\r\n      </div>\r\n    )\r\n  } \r\n};\r\n\r\n\r\n","import ItemDetails, { Record } from './item-details';\r\n\r\nexport {\r\n    Record\r\n};\r\nexport default ItemDetails;\r\n","import React, { Component } from 'react';\r\n\r\nimport Spinner from '../spinner';\r\nimport ErrorIndicator from '../error-indicator';\r\n\r\nconst withData = (View) => {\r\n  return class extends Component {\r\n\r\n    state = {\r\n      data: null,\r\n      loading: true,\r\n      error: false\r\n    };\r\n\r\n    componentDidMount() {\r\n      this.update()\r\n    }\r\n\r\n    update() {\r\n      this.setState({\r\n        loading: true,\r\n        error: false\r\n      });\r\n\r\n      this.props.getData()\r\n      .then((data) => {\r\n        this.setState({\r\n          data,\r\n          loading: false\r\n        });\r\n      }).catch(() => {\r\n        this.setState({\r\n          loading: false,\r\n          error: true\r\n        });\r\n      });\r\n    }\r\n\r\n    render() {\r\n      const { data, loading, error } = this.state;\r\n\r\n      if (loading) {\r\n        return <Spinner />;\r\n      }\r\n\r\n      if (error) {\r\n        return <ErrorIndicator />;\r\n      }\r\n\r\n      return <View {...this.props} data={data} />;\r\n    }\r\n  };\r\n};\r\n\r\nexport default withData;\r\n","import React from 'react';\r\nimport { SwapiServiceConsumer } from '../swapi-service-context';\r\n\r\nconst withSwapiService  = (Wrapped, mapMethodsToProps) => {\r\n    return (props) => {\r\n        return (\r\n        <SwapiServiceConsumer>\r\n            { \r\n                (swapiService) => {\r\n                    const serviceProps = mapMethodsToProps(swapiService)\r\n\r\n                    return (\r\n                        <Wrapped { ...props }  {...serviceProps}/>    \r\n                    )\r\n                }\r\n            }\r\n        </SwapiServiceConsumer>\r\n        );\r\n    }\r\n};\r\n\r\nexport default withSwapiService;","import React from 'react';\r\nimport ItemDetails, { Record } from '../item-details';\r\nimport { withSwapiService } from \"../hoc-helper\"\r\n\r\nconst PersonDetails = (props) => {\r\n  return (\r\n          <ItemDetails { ...props } >\r\n            <Record field=\"gender\" label=\"Gender\" />\r\n            <Record field=\"eyeColor\" label=\"Eye Color\" />\r\n          </ItemDetails>\r\n    );\r\n};\r\n\r\nconst mapMethodsToProps = (swapiService) => {\r\n  return {\r\n      getData: swapiService.getPerson,\r\n      getImageUrl: swapiService.getPersonImage\r\n  }\r\n};\r\n\r\nexport default withSwapiService(PersonDetails, mapMethodsToProps);\r\n","import React from 'react';\r\nimport ItemDetails, { Record } from '../item-details';\r\nimport { withSwapiService } from \"../hoc-helper\"\r\n\r\nconst PlanetDetails = (props) => {\r\n    return (\r\n      <ItemDetails { ...props }>\r\n        <Record field=\"population\" label=\"Population\" />\r\n        <Record field=\"rotationPeriod\" label=\"Rotation Period\" />\r\n        <Record field=\"diameter\" label=\"Diameter\" />\r\n      </ItemDetails>\r\n    );\r\n};\r\n\r\nconst mapMethodsToProps = (swapiService) => {\r\n  return {\r\n      getData: swapiService.getPlanet,\r\n      getImageUrl: swapiService.getPlanetImage\r\n  }\r\n};\r\n\r\n\r\nexport default withSwapiService(PlanetDetails, mapMethodsToProps);\r\n","import React from 'react';\r\nimport ItemDetails, { Record } from '../item-details';\r\nimport { withSwapiService } from \"../hoc-helper\"\r\n\r\nconst StarshipDetails = (props) => {\r\n  return(\r\n      <ItemDetails {...props}>\r\n        <Record field=\"model\" label=\"Model\" />\r\n        <Record field=\"length\" label=\"Length\" />\r\n        <Record field=\"costInCredits\" label=\"Cost\" />\r\n      </ItemDetails>\r\n  );\r\n};\r\n\r\nconst mapMethodsToProps = (swapiService) => {\r\n  return {\r\n      getData: swapiService.getStarship,\r\n      getImageUrl: swapiService.getStarshipImage\r\n  }\r\n};\r\n\r\nexport default withSwapiService(StarshipDetails, mapMethodsToProps);\r\n","import React from 'react';\r\nimport { withData } from '../hoc-helper';\r\n\r\nimport './item-list.css';\r\nimport SwapiService from '../../services/swapi-service';\r\n\r\n const ItemList = (props) => {\r\n\r\n    const { data, onItemSelected, children: renderLabe } = props;\r\n\r\n    const items = data.map((item) => {\r\n        const { id } = item;\r\n  \r\n        const label = renderLabe(item);\r\n          return (\r\n            <li className=\"list-group-item\"\r\n            key={id}\r\n            onClick={() => onItemSelected(id) }>\r\n              { label }\r\n            </li>\r\n          );\r\n      });\r\n\r\n    return (\r\n      <ul className=\"item-list list-group\">\r\n        {items}\r\n      </ul>\r\n    );\r\n};\r\n\r\nItemList.defaultProps = {\r\n  onItemSelected: () => {}\r\n};\r\n\r\nconst { getAllPeople } = new SwapiService();\r\n\r\nexport default withData(ItemList, getAllPeople);\r\n\r\n","import ItemList from './item-list';\r\n\r\nexport default ItemList;\r\n","import React from 'react';\nimport ItemList from '../item-list';\nimport { withData, withSwapiService } from '../hoc-helper';\n\nconst withChildFunction = (Wrapped, fn) => {\n  return (props) => {\n    return (\n      <Wrapped {...props}>\n        {fn}\n      </Wrapped>\n    )\n  };\n};\n\nconst renderName = ({ name }) => <span>{name}</span>;\nconst renderModelAndName = ({ model, name}) => <span>{name} ({model})</span>;\n\nconst mapPersonMethodsToProps = (swapiService) =>{\n  return {\n    getData: swapiService.getAllPeople\n  }\n};\n\nconst mapPlanetMethodsToProps = (swapiService) =>{\n  return {\n    getData: swapiService.getAllPlanets\n  }\n};\n\nconst mapStarshipsMethodsToProps = (swapiService) =>{\n  return {\n    getData: swapiService.getAllStarships\n  }\n};\n\nconst PersonList = withSwapiService(\n                      withData(\n                        withChildFunction(ItemList, renderName)),\n                        mapPersonMethodsToProps);\n\nconst PlanetList = withSwapiService(\n                      withData(\n                        withChildFunction(ItemList, renderName)),\n                        mapPlanetMethodsToProps);\n\nconst StarshipList = withSwapiService(\n                        withData(\n                          withChildFunction(ItemList, renderModelAndName)),\n                          mapStarshipsMethodsToProps);\n\nexport {\n  PersonList,\n  PlanetList,\n  StarshipList,\n};\n","import Row from './row';\r\n\r\nexport default Row;","import React from 'react';\r\n\r\nimport './row.css';\r\n\r\nconst Row = ({ left, right }) => {\r\n    return(\r\n        <div className=\"row mb2\">\r\n            <div className=\"col-md-6\">\r\n                { left }\r\n            </div>\r\n            <div className=\"col-md-6\">\r\n                { right }\r\n            </div>\r\n        </div>  \r\n    );\r\n};\r\n\r\nexport default Row;","import React from 'react';\r\nimport { PersonDetails, PersonList } from '../sw-component';\r\nimport Row from '../row';\r\nimport { withRouter } from 'react-router-dom';\r\n\r\n\r\nconst PeoplePage = ({ history, match }) => {\r\n  const { id } = match.params;\r\n\r\n    return (\r\n      <Row\r\n        left={<PersonList onItemSelected={ (id) => history.push(...id) } />}\r\n        right={<PersonDetails itemId={ id } />} />\r\n    );\r\n};\r\n\r\nexport default withRouter(PeoplePage);\r\n","import React, { Component } from 'react';\r\nimport { PlanetDetails, PlanetList } from '../sw-component';\r\nimport Row from '../row';\r\n\r\nexport default class PlanetPage extends Component {\r\n\r\n  state = {\r\n    selectedItem: null\r\n  };\r\n\r\n  onItemSelected = (selectedItem) => {\r\n    this.setState({ selectedItem });\r\n  };\r\n\r\n  render() {\r\n    const { selectedItem } = this.state;\r\n\r\n    return (\r\n      <Row\r\n        left={<PlanetList onItemSelected={this.onItemSelected} />}\r\n        right={<PlanetDetails itemId={selectedItem} />} />\r\n    );\r\n  }\r\n\r\n}\r\n","import React from 'react';\r\nimport { StarshipList } from '../sw-component';\r\nimport { withRouter } from 'react-router-dom';\r\n\r\nconst StarshipsPage = ({ history }) => {\r\n    return (\r\n      <StarshipList \r\n          onItemSelected = { (itemId) => {\r\n            history.push(`${itemId}`);\r\n      }}/>\r\n    );\r\n};\r\n\r\nexport default withRouter(StarshipsPage);\r\n","import App from './app';\r\n\r\nexport default App;\r\n","import React from 'react';\r\n\r\nimport Header from '../header';\r\nimport RandomPlanet from '../random-planet';\r\nimport ErrorBoundry from '../error-boundry';\r\nimport SwapiService from '../../services/swapi-service';\r\n\r\nimport { SwapiServiceProvider } from '../swapi-service-context';\r\nimport { PeoplePage, PlanetPage, StarshipPage } from '../pages';\r\n\r\n\r\nimport './app.css';\r\n\r\nimport { BrowserRouter as Router, Route, Switch } from 'react-router-dom';\r\nimport { StarshipDetails } from '../sw-component';\r\n\r\nexport default class App extends React.Component {\r\n\r\n  swapiService = new SwapiService();\r\n\r\n  render() {\r\n\r\n    return (\r\n      <ErrorBoundry>\r\n        <SwapiServiceProvider value={this.swapiService} >\r\n          <Router basename=\"/stardb\">\r\n            <div className=\"stardb-app\">\r\n              <Header />\r\n              <RandomPlanet />\r\n              <Switch>\r\n                <Route  path=\"/\" \r\n                        render={() => <h2>Welcome to StarDB</h2>}\r\n                        exact />\r\n                <Route path=\"/peoples/:id?\" component={PeoplePage} />\r\n                <Route path=\"/planets\" component={PlanetPage} />\r\n                <Route path=\"/starships\" component={StarshipPage} exact/>\r\n                <Route path=\"/starships/:id\" \r\n                        render={ ({ match }) => {\r\n                          const { id } = match.params;\r\n\r\n                        return <StarshipDetails itemId = { id } /> \r\n                      }} />\r\n                <Route render={ () => <h1>Page not found</h1> } />\r\n            </Switch>\r\n            </div>\r\n          </Router>\r\n        </SwapiServiceProvider>\r\n      </ErrorBoundry>\r\n    );\r\n  }\r\n}\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport App from './components/app';\r\n\r\nReactDOM.render(<App />,\r\n  document.getElementById('root'));\r\n"],"sourceRoot":""}